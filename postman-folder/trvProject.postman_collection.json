{
	"info": {
		"_postman_id": "9be6da62-321c-4142-b396-419744f997e0",
		"name": "trvProject",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "register-successed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"kertosari\",\r\n    \"email\": \"arisantisoekamto@gmail.com\",\r\n    \"username\": \"akhfzz\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/register/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"register",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "register-duplicated-email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 500', () => {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals(500);\r",
							"    pm.expect(responseJson.message).to.equals('Email has been used');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/sys-regis/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"sys-regis",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "forgetted-psw-success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"arisantisoekamto@gmail.com\",\r\n    \"password\": \"kertosari234\",\r\n    \"confirm_password\": \"kertosari234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/reset-psw/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"reset-psw",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "confirm-token-success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals(201);\r",
							"    pm.expect(responseJson.message).to.equals('Password has been updated');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": \"DSJNc\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/reset-psw/confirm",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"reset-psw",
						"confirm"
					]
				}
			},
			"response": []
		},
		{
			"name": "register-not-valid-parser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals(400);\r",
							"    pm.expect(responseJson.message).to.equals('Username and Password must be have 6 and 8 lenght character');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"fafa\",\r\n    \"password\": \"abc\",\r\n    \"username\": \"al\",\r\n    \"email\": \"akhmadfaizal@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/sys-regis/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"sys-regis",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "register-invalid-pattern-email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equals(400);\r",
							"    pm.expect(responseJson.message).to.equals(\"Email's pattern should '@gmail.com'\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"fafasa\",\r\n    \"password\": \"abc\",\r\n    \"username\": \"alghazali\",\r\n    \"email\": \"akhmadfaizal@yahoo.id\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/sys-regis/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"sys-regis",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "auth",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjU0NzUzNTY5LCJpYXQiOjE2NTQ3NTMyNjksImp0aSI6IjkyMTYzYTNhNjk4ODRmNGY5MDQ2N2I4NDllNDUyNTc4IiwidXNlcl9pZCI6MX0.yvE829k-ccK--dT5zTvwFIkFUxwVd2YZVGkg_MI5TWk",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"akhfzz23@gmail.com\",\r\n    \"password\": \"kertosari\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/authenticated/endpoint",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"authenticated",
						"endpoint"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"akhmadfaizal13@gmail.com\",\r\n    \"password\": \"kertosari23\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:{{port}}/api/token/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "{{port}}",
					"path": [
						"api",
						"token",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "model",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"product_score\": 3.7,\r\n    \"qty\": 16.0,\r\n    \"freight_price\": 15.628125,\r\n    \"product_weight_g\": 850.0,\r\n    \"lag_price\": 35.0,\r\n    \"comp_1\": 103.2333333,\r\n    \"ps1\": 4.1,\r\n    \"fp1\": 22.3,\r\n    \"comp_2\": 35.0,\r\n    \"ps2\": 3.7,\r\n    \"fp2\": 15.628125,\r\n    \"bed_bath_table\": 0,\r\n    \"computers_accessories\": 1,\r\n    \"consoles_games\": 0,\r\n    \"cool_stuff\": 1,\r\n    \"furniture_decor\": 0,\r\n    \"garden_tools\": 0,\r\n    \"health_beauty\": 0,\r\n    \"perfumery\": 0,\r\n    \"watches_gifts\": 0\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/predict",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"predict"
					]
				}
			},
			"response": []
		}
	]
}